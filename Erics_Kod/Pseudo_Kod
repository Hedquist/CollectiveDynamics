Obstacle avoidance

obst_type[['wall'],['rect'],['circ]]
obst_coords = [[[1x1]],[[Nx2]],[[Nx2]]]

# Metoder
is_point_outside_rectangle()
is_point_inside_circle()
calculate_distance()

Detect(ray_coords):
    n_rays = len(ray_coords)
    obst_type_detect = [[], [], []] # Lista med vilken typ av hinder den kÃ¤nner av
    obst_detect = [[],[],[]] # Lista med vilken typ plus alla ray
    for type in obst_type:
        for k in range(len(obst_coords[obst])):
            if(obst_type[type]=='wall'):
                obst_detect[type].append([ [is_point_outside_rectangle(ray_coords[i]) for i in range(n_rays)] ])
            else if(obst_type[type]=='rect'):
                obst_detect[type].append([ [is_point_inside_rectangle(ray_coords[i]) for i in range(n_rays)] ])
            else if(obst_type[type]=='circ'):
                obst_detect[type].append([ [is_point_inside_circle(ray_coords[i]) for i in range(n_rays)] ])
        if(len(obst_type)>1):
            obst_type_detect[type] = True in list(itertools.chain.from_iterable(obst_detect[type]))
        else:
           obst_type_detect[type] = True in obst_detect[type]

	return (obst_type_detect)


Avoid()
    calc_closest distance
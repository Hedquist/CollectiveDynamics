Obstacle avoidance

obst_type[['wall'],['rect'],['circ]]

Detect(ray_coords):
    Ta fram vilket typ av hinder som rayen detekterar
    Ta fram vilka hinder som ray träffar
    Samt vilka ray som är upptagna för det hindret
    return [bool, bool, bool]

Calc_closest_obst(ray_coords, type_of_obst):
    Ta fram närmsta avståndet för hindret
    M.a.p på avståndet mellan fiskens grafikradie och objektets radie/periferi
    return(objekttyp, objectindex, avstånd)

Avoid(ray_coords, type_of_obst, obst_index):
    Ta fram vilken ray som inte är upptagen relativ det närmsta objektet
    Använd den som referens
    Beräknar avståndet mellan fiskens grafikradie och hindrets perifer i riktning av den ockupperade rayen
    Skala vinkeländringen med avståndet
    return(vinkeländring)


Obstacle avoidance

obst_type[['wall'],['rect'],['circ]]
obst_coords = [[[1x1]],[[Nx2]],[[Nx2]]]

# Metoder
is_point_outside_rectangle()
is_point_inside_circle()
calculate_distance()

Detect(ray_coords):
    n_rays = len(ray_coords)
    obst_type_detect = [[], [], []] # Lista med vilken typ av hinder den känner av
    obst_detect = [[],[],[]] # Lista med vilken typ plus alla ray
    for type in obst_type:
        for k in range(len(obst_coords[obst])):
            if(obst_type[type]=='wall'):
                obst_detect[type].append([ [is_point_outside_rectangle(ray_coords[i]) for i in range(n_rays)] ])
            else if(obst_type[type]=='rect'):
                obst_detect[type].append([ [is_point_inside_rectangle(ray_coords[i]) for i in range(n_rays)] ])
            else if(obst_type[type]=='circ'):
                obst_detect[type].append([ [is_point_inside_circle(ray_coords[i]) for i in range(n_rays)] ])
        if(len(obst_type)>1):
            obst_type_detect[type] = True in list(itertools.chain.from_iterable(obst_detect[type]))
        else:
           obst_type_detect[type] = True in obst_detect[type]

	return (obst_type_detect)

def calc_closest_obst(fish_coords, ray_coords, type_of_obst, obst_ray_index):
    closest_obst_index = [[],[],[]]
    closest_obst_dist = [[],[],[]]
    for type in range(len(obst_type)):
         if obst_type[type]:
            if(obst_type[type]=='wall'):
                 closest_obst_dist[type] = np.min(canvas_length- np.array(fish_coord) - fish_graphic_radius)
            elif(obst_type[type]=='rect'):
                 object_index = np.argmin(calculate_distance(circ_obst_coords, ray_coords))
            elif if(obst_type[type]=='circ'):
                 object_index = np.argmin(canvas_length - fish_coords[j])  # Hur ska index fungera för väggen?
         else:
            closest_obst_dist[type] = np.inf
     return (object_type, object_index, distance)



Avoid()
    calc_closest distance


TO DO:
LÄgg till en ytterliggare boolean relativt hinder
Ändrar avståndsberäkning i calc_closest
Ändrar FOV så att avstånd mellan två ray i mitten är lika med fiskens radie
Avstånd till kvadrat = minus bredden
